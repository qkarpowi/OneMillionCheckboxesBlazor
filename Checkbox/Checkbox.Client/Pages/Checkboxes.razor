@page "/"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections
@inject NavigationManager Navigation
@inject ILogger<Checkboxes> logger
@inject HttpClient httpClient
@implements IAsyncDisposable

<PageTitle>One Million Checkboxes</PageTitle>

<h1>One Million Checkboxes</h1>
<p>
    <em>One million checkboxes, each with a unique state, all synchronized in real-time using SignalR.</em>
</p>
<p>
    This project is meant to emulate eieio's one million checkboxes project, but with a Blazor twist. Check out the <a href="https://eieio.games/nonsense/game-14-one-million-checkboxes/">original</a>.
</p>
<p>
    <a href="https://github.com/qkarpowi/OneMillionCheckboxesBlazor/tree/master">Github Repo</a>
</p>
<p>
    @if (!isLoading)
    {
        <span class="fw-bold">Current Status: </span> @if (IsConnected)
        {
            <span class="text-success">Connected</span>
        }
        else
        {
            <span class="text-danger">Disconnected</span>
        }
    }
</p>

<hr />

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
        </div>
        <h3 class="ms-2">Loading...</h3>
    </div>
}
else
{
    <div class="row">
        <Virtualize Items="checkboxList" Context="item" OverscanCount="1000">
            <div class="col">
                <input class="form-check-input" type="checkbox" @bind="item.Value" @onclick="async () => await Send(item.Index)" id="@($"Checkbox{item.Index}")" disabled="@(!IsConnected)">
            </div>
        </Virtualize>
    </div>
}

@code {
    private bool isLoading = true;
    private HubConnection? hubConnection;
    private List<(int Index, bool Value)> checkboxList = new();

    protected override async Task OnInitializedAsync()

    {
        var checkboxes = await httpClient.GetFromJsonAsync<List<bool>>("../state");

        if (checkboxes != null)
        {
            checkboxList = Enumerable.Range(0, checkboxes.Count)
                                     .Select(index => (index, checkboxes[index]))
                                     .ToList();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/checkboxhub"))
            .Build();

        hubConnection.On<int, bool>("ReceiveMessage", (id, value) =>
        {
            logger.LogInformation("Received Message {id} {value}", id, value);
            if (checkboxes != null)
            {
                checkboxList[id] = (id, value);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        isLoading = false;
    }

    private async Task Send(int index)
    {
        if (hubConnection is not null)
        {

            logger.LogInformation("Sending Message {index} is {CheckBox1}", index, !checkboxList[index].Value);
            checkboxList[index] = (index, !checkboxList[index].Value);
            await hubConnection.SendAsync("SendMessage", index, checkboxList[index].Value);
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
